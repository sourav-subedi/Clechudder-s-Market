
--------------------------------------------------------------
-- Database creation Script

-- Auto-Generated by QSEE-SuperLite (c) 2001-2004 QSEE-Technologies Ltd.

-- Verbose generation: ON

-- note: spaces within table/column names have been replaced by underscores (_)

-- Target DB: SQL2

-- Entity Model :Entity Relationship Diagram

-- To drop the tables generated by this script run -
--   'C:\Users\acer\Desktop\db_schema_drop.sql'

--------------------------------------------------------------



--------------------------------------------------------------
-- Table Creation --

-- Each entity on the model is represented by a table that needs to be created within the Database.
-- Within SQL new tables are created using the CREATE TABLE command.
-- When a table is created its name and its attributes are defined.
-- The values of which are derived from those specified on the model.
-- Certain constraints are sometimes also specified, such as identification of primary keys.

-- Create a Database table to represent the "REVIEWS" entity.
CREATE TABLE REVIEWS(
	review_id	INTEGER NOT NULL,
	review_rating	INTEGER,
	review	LONG VARCHAR,
	review_date	DATE,
	user_id	INTEGER NOT NULL UNIQUE,
	product_id	INTEGER NOT NULL UNIQUE,
	fk1_user_id	INTEGER NOT NULL,
	fk2_product_id	INTEGER NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "REVIEWS".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_REVIEWS PRIMARY KEY (review_id)
);

-- Create a Database table to represent the "PRODUCT" entity.
CREATE TABLE PRODUCT(
	product_id	INTEGER NOT NULL,
	product_name	VARCHAR(8),
	description	LONG VARCHAR,
	stock	INTEGER,
	price	INTEGER,
	max_order	INTEGER,
	min_order	INTEGER,
	add_date	DATE,
	update_date	DATE,
	shop_id	INTEGER NOT NULL UNIQUE,
	product_categroy_id	INTEGER,
	product_image	VARCHAR(50) NOT NULL,
	fk1_shop_id	INTEGER NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "PRODUCT".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_PRODUCT PRIMARY KEY (product_id)
);

-- Create a Database table to represent the "PAYMENT" entity.
CREATE TABLE PAYMENT(
	payment_id	INTEGER NOT NULL,
	payment_date	DATE,
	amount	INTEGER,
	payment_method	VARCHAR(8),
	order_id	INTEGER NOT NULL UNIQUE,
	user_id	INTEGER NOT NULL,
	payment_status	VARCHAR(8),
	fk1_user_id	INTEGER NOT NULL,
	fk2_order_id	INTEGER NOT NULL,
	-- Specify FK as unique to maintain 1:1 relationship
	UNIQUE(fk2_order_id),
	-- Specify the PRIMARY KEY constraint for table "PAYMENT".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_PAYMENT PRIMARY KEY (payment_id)
);

-- Create a Database table to represent the "ORDER_ITEM" entity.
CREATE TABLE ORDER_ITEM(
	order_id	INTEGER NOT NULL UNIQUE,
	product_id	INTEGER NOT NULL UNIQUE,
	fk1_product_id	INTEGER NOT NULL,
	fk2_order_id	INTEGER NOT NULL
);

-- Create a Database table to represent the "ORDER" entity.
CREATE TABLE ORDER(
	order_id	INTEGER NOT NULL,
	order_date	DATE,
	order_amount	INTEGER,
	collection_slot_id	INTEGER NOT NULL UNIQUE,
	user_id	INTEGER NOT NULL UNIQUE,
	cart_id	INTEGER NOT NULL UNIQUE,
	coupon_id	INTEGER,
	status	VARCHAR(8),
	fk1_user_id	INTEGER NOT NULL,
	fk2_cart_id	INTEGER NOT NULL,
	-- Specify FK as unique to maintain 1:1 relationship
	UNIQUE(fk2_cart_id),
	fk3_collection_slot_id	INTEGER NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "ORDER".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_ORDER PRIMARY KEY (order_id)
);

-- Create a Database table to represent the "USER" entity.
CREATE TABLE USER(
	user_id	INTEGER NOT NULL,
	full_name	VARCHAR(8),
	phone_no	INTEGER,
	email	VARCHAR(8),
	password	VARCHAR(8),
	DOB	DATE,
	verify_code	INTEGER,
	status	NUMERIC(8,2),
	role	VARCHAR(8),
	created_date	DATE,
	-- Specify the PRIMARY KEY constraint for table "USER".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_USER PRIMARY KEY (user_id)
);

-- Create a Database table to represent the "DISCOUNT" entity.
CREATE TABLE DISCOUNT(
	discount_id	INTEGER NOT NULL,
	discount_percentage	FLOAT(8),
	product_id	INTEGER NOT NULL UNIQUE,
	fk1_product_id	INTEGER NOT NULL,
	-- Specify FK as unique to maintain 1:1 relationship
	UNIQUE(fk1_product_id),
	-- Specify the PRIMARY KEY constraint for table "DISCOUNT".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_DISCOUNT PRIMARY KEY (discount_id)
);

-- Create a Database table to represent the "CART_PRODUCT" entity.
CREATE TABLE CART_PRODUCT(
	cart_id	INTEGER NOT NULL UNIQUE,
	product_id	INTEGER NOT NULL UNIQUE,
	quantity	VARCHAR(8) NOT NULL,
	fk1_cart_id	INTEGER NOT NULL,
	fk2_product_id	INTEGER NOT NULL
);

-- Create a Database table to represent the "SHOP" entity.
CREATE TABLE SHOP(
	shop_id	INTEGER NOT NULL,
	shop_name	VARCHAR(8),
	register_date	DATE,
	description	LONG VARCHAR,
	user_id	INTEGER NOT NULL UNIQUE,
	shop_catagory	VARCHAR(8) NOT NULL,
	shop_email	VARCHAR(8) NOT NULL,
	contact_no	NUMERIC(8,2) NOT NULL,
	total_item	VARCHAR(8) NOT NULL,
	fk1_user_id	INTEGER NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "SHOP".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_SHOP PRIMARY KEY (shop_id)
);

-- Create a Database table to represent the "COLLECTION_SLOT" entity.
CREATE TABLE COLLECTION_SLOT(
	collection_slot_id	INTEGER NOT NULL,
	slot_date	DATE,
	slot_day	VARCHAR(8),
	slot_time	TIMESTAMP(8) NOT NULL,
	total_order	INTEGER,
	-- Specify the PRIMARY KEY constraint for table "COLLECTION_SLOT".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_COLLECTION_SLOT PRIMARY KEY (collection_slot_id)
);

-- Create a Database table to represent the "REPORT" entity.
CREATE TABLE REPORT(
	report_id	INTEGER NOT NULL,
	report_type	VARCHAR(8),
	report_title	VARCHAR(8),
	report_date	DATE,
	order_id	INTEGER NOT NULL UNIQUE,
	user_ID	INTEGER NOT NULL UNIQUE,
	report_description	VARCHAR(8) NOT NULL,
	fk1_order_id	INTEGER NOT NULL,
	fk2_user_id	INTEGER NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "REPORT".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_REPORT PRIMARY KEY (report_id)
);

-- Create a Database table to represent the "CART" entity.
CREATE TABLE CART(
	cart_id	INTEGER NOT NULL,
	add_date	DATE,
	user_id	INTEGER NOT NULL UNIQUE,
	fk1_user_id	INTEGER NOT NULL,
	-- Specify FK as unique to maintain 1:1 relationship
	UNIQUE(fk1_user_id),
	-- Specify the PRIMARY KEY constraint for table "CART".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_CART PRIMARY KEY (cart_id)
);

-- Create a Database table to represent the "PRODUCT_REPORT" entity.
CREATE TABLE PRODUCT_REPORT(
	product_id	INTEGER NOT NULL UNIQUE,
	report_id	INTEGER NOT NULL UNIQUE,
	fk1_product_id	INTEGER NOT NULL,
	fk2_report_id	INTEGER NOT NULL
);

-- Create a Database table to represent the "WISHLIST" entity.
CREATE TABLE WISHLIST(
	wishlist_id	INTEGER NOT NULL,
	no_of_items	INTEGER NOT NULL,
	user_id	INTEGER,
	fk1_user_id	INTEGER NOT NULL,
	-- Specify FK as unique to maintain 1:1 relationship
	UNIQUE(fk1_user_id),
	-- Specify the PRIMARY KEY constraint for table "WISHLIST".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_WISHLIST PRIMARY KEY (wishlist_id)
);

-- Create a Database table to represent the "WISHLIST_PRODUCT" entity.
CREATE TABLE WISHLIST_PRODUCT(
	wishlist_id	INTEGER,
	product_id	INTEGER,
	added_date	DATE NOT NULL,
	fk1_wishlist_id	INTEGER NOT NULL,
	fk2_product_id	INTEGER NOT NULL
);

-- Create a Database table to represent the "COUPON" entity.
CREATE TABLE COUPON(
	coupon_id	INTEGER NOT NULL,
	coupon_code	VARCHAR(8) NOT NULL,
	start_date	DATE NOT NULL,
	end_date	DATE NOT NULL,
	description	VARCHAR(50) NOT NULL,
	coupon_discount_percennt	FLOAT(8) NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "COUPON".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_COUPON PRIMARY KEY (coupon_id)
);


--------------------------------------------------------------
-- Create LINK tables --

-- These tables do not appear as entities on the model. The reason they are created
-- is to allow certain types of relationships to be implemented in a Relational type Database.
-- Each link table tends to represent a specific relationship that appears on the model.
-- The attributes contained in link tables are identified from the entities at either side
-- of the relationship. i.e. they do not define attributes in their own right.
-- Indeed foreign key constraints are always created to ensure referential integrity between the
-- link table attributes and the primary key attributes on which they are based.

-- Create a link table to represent the "COUPON_ORDER" relationship.
-- The attributes of this table are taken from the primary keys of table "COUPON" and
-- table "ORDER", i.e. each end of the relationship. A link table was created
-- because "COUPON_ORDER" is a one to many relationship with optionality at the one side.
-- notice how the primary key is only based on the key of the table at the many side, i.e. table "ORDER".
CREATE TABLE COUPON_ORDER(
	s_coupon_id	INTEGER NOT NULL,
	d_order_id	INTEGER NOT NULL,
	PRIMARY KEY (d_order_id),
	FOREIGN KEY(s_coupon_id) REFERENCES COUPON(coupon_id) ON DELETE RESTRICT ON UPDATE RESTRICT,
	FOREIGN KEY(d_order_id) REFERENCES ORDER(order_id) ON DELETE RESTRICT ON UPDATE RESTRICT
);


--------------------------------------------------------------
-- Alter Tables to add fk constraints --

-- Now all the tables have been created the ALTER TABLE command is used to define some additional
-- constraints.  These typically constrain values of foreign keys to be associated in some way
-- with the primary keys of related tables.  Foreign key constraints can actually be specified
-- when each table is created, but doing so can lead to dependency problems within the script
-- i.e. tables may be referenced before they have been created.  This method is therefore safer.

-- Alter table to add new constraints required to implement the "PRODUCT_REPORT_PRODUCT" relationship

-- This constraint ensures that the foreign key of table "PRODUCT_REPORT"
-- correctly references the primary key of table "PRODUCT"

ALTER TABLE PRODUCT_REPORT ADD CONSTRAINT fk1_PRODUCT_REPORT_to_PRODUCT FOREIGN KEY(fk1_product_id) REFERENCES PRODUCT(product_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "REPORT_ORDER" relationship

-- This constraint ensures that the foreign key of table "REPORT"
-- correctly references the primary key of table "ORDER"

ALTER TABLE REPORT ADD CONSTRAINT fk1_REPORT_to_ORDER FOREIGN KEY(fk1_order_id) REFERENCES ORDER(order_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "PRODUCT_REPORT_REPORT" relationship

-- This constraint ensures that the foreign key of table "PRODUCT_REPORT"
-- correctly references the primary key of table "REPORT"

ALTER TABLE PRODUCT_REPORT ADD CONSTRAINT fk2_PRODUCT_REPORT_to_REPORT FOREIGN KEY(fk2_report_id) REFERENCES REPORT(report_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "REVIEWS_USER" relationship

-- This constraint ensures that the foreign key of table "REVIEWS"
-- correctly references the primary key of table "USER"

ALTER TABLE REVIEWS ADD CONSTRAINT fk1_REVIEWS_to_USER FOREIGN KEY(fk1_user_id) REFERENCES USER(user_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "ORDER_USER" relationship

-- This constraint ensures that the foreign key of table "ORDER"
-- correctly references the primary key of table "USER"

ALTER TABLE ORDER ADD CONSTRAINT fk1_ORDER_to_USER FOREIGN KEY(fk1_user_id) REFERENCES USER(user_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "ORDER_CART" relationship

-- This constraint ensures that the foreign key of table "ORDER"
-- correctly references the primary key of table "CART"

ALTER TABLE ORDER ADD CONSTRAINT fk2_ORDER_to_CART FOREIGN KEY(fk2_cart_id) REFERENCES CART(cart_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "REPORT_USER" relationship

-- This constraint ensures that the foreign key of table "REPORT"
-- correctly references the primary key of table "USER"

ALTER TABLE REPORT ADD CONSTRAINT fk2_REPORT_to_USER FOREIGN KEY(fk2_user_id) REFERENCES USER(user_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "SHOP_USER" relationship

-- This constraint ensures that the foreign key of table "SHOP"
-- correctly references the primary key of table "USER"

ALTER TABLE SHOP ADD CONSTRAINT fk1_SHOP_to_USER FOREIGN KEY(fk1_user_id) REFERENCES USER(user_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "PRODUCT_SHOP" relationship

-- This constraint ensures that the foreign key of table "PRODUCT"
-- correctly references the primary key of table "SHOP"

ALTER TABLE PRODUCT ADD CONSTRAINT fk1_PRODUCT_to_SHOP FOREIGN KEY(fk1_shop_id) REFERENCES SHOP(shop_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "PAYMENT_USER" relationship

-- This constraint ensures that the foreign key of table "PAYMENT"
-- correctly references the primary key of table "USER"

ALTER TABLE PAYMENT ADD CONSTRAINT fk1_PAYMENT_to_USER FOREIGN KEY(fk1_user_id) REFERENCES USER(user_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "ORDER_ITEM_PRODUCT" relationship

-- This constraint ensures that the foreign key of table "ORDER_ITEM"
-- correctly references the primary key of table "PRODUCT"

ALTER TABLE ORDER_ITEM ADD CONSTRAINT fk1_ORDER_ITEM_to_PRODUCT FOREIGN KEY(fk1_product_id) REFERENCES PRODUCT(product_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "ORDER_ITEM_ORDER" relationship

-- This constraint ensures that the foreign key of table "ORDER_ITEM"
-- correctly references the primary key of table "ORDER"

ALTER TABLE ORDER_ITEM ADD CONSTRAINT fk2_ORDER_ITEM_to_ORDER FOREIGN KEY(fk2_order_id) REFERENCES ORDER(order_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "ORDER_COLLECTION_SLOT" relationship

-- This constraint ensures that the foreign key of table "ORDER"
-- correctly references the primary key of table "COLLECTION_SLOT"

ALTER TABLE ORDER ADD CONSTRAINT fk3_ORDER_to_COLLECTION_SLOT FOREIGN KEY(fk3_collection_slot_id) REFERENCES COLLECTION_SLOT(collection_slot_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "PAYMENT_ORDER" relationship

-- This constraint ensures that the foreign key of table "PAYMENT"
-- correctly references the primary key of table "ORDER"

ALTER TABLE PAYMENT ADD CONSTRAINT fk2_PAYMENT_to_ORDER FOREIGN KEY(fk2_order_id) REFERENCES ORDER(order_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "REVIEWS_PRODUCT" relationship

-- This constraint ensures that the foreign key of table "REVIEWS"
-- correctly references the primary key of table "PRODUCT"

ALTER TABLE REVIEWS ADD CONSTRAINT fk2_REVIEWS_to_PRODUCT FOREIGN KEY(fk2_product_id) REFERENCES PRODUCT(product_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "CART_PRODUCT_CART" relationship

-- This constraint ensures that the foreign key of table "CART_PRODUCT"
-- correctly references the primary key of table "CART"

ALTER TABLE CART_PRODUCT ADD CONSTRAINT fk1_CART_PRODUCT_to_CART FOREIGN KEY(fk1_cart_id) REFERENCES CART(cart_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "DISCOUNT_PRODUCT" relationship

-- This constraint ensures that the foreign key of table "DISCOUNT"
-- correctly references the primary key of table "PRODUCT"

ALTER TABLE DISCOUNT ADD CONSTRAINT fk1_DISCOUNT_to_PRODUCT FOREIGN KEY(fk1_product_id) REFERENCES PRODUCT(product_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "CART_PRODUCT_PRODUCT" relationship

-- This constraint ensures that the foreign key of table "CART_PRODUCT"
-- correctly references the primary key of table "PRODUCT"

ALTER TABLE CART_PRODUCT ADD CONSTRAINT fk2_CART_PRODUCT_to_PRODUCT FOREIGN KEY(fk2_product_id) REFERENCES PRODUCT(product_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "WISHLIST_USER" relationship

-- This constraint ensures that the foreign key of table "WISHLIST"
-- correctly references the primary key of table "USER"

ALTER TABLE WISHLIST ADD CONSTRAINT fk1_WISHLIST_to_USER FOREIGN KEY(fk1_user_id) REFERENCES USER(user_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "WISHLIST_PRODUCT_WISHLIST" relationship

-- This constraint ensures that the foreign key of table "WISHLIST_PRODUCT"
-- correctly references the primary key of table "WISHLIST"

ALTER TABLE WISHLIST_PRODUCT ADD CONSTRAINT fk1_WISHLIST_PRODUCT_to_WISHLIST FOREIGN KEY(fk1_wishlist_id) REFERENCES WISHLIST(wishlist_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "WISHLIST_PRODUCT_PRODUCT" relationship

-- This constraint ensures that the foreign key of table "WISHLIST_PRODUCT"
-- correctly references the primary key of table "PRODUCT"

ALTER TABLE WISHLIST_PRODUCT ADD CONSTRAINT fk2_WISHLIST_PRODUCT_to_PRODUCT FOREIGN KEY(fk2_product_id) REFERENCES PRODUCT(product_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "CART_USER" relationship

-- This constraint ensures that the foreign key of table "CART"
-- correctly references the primary key of table "USER"

ALTER TABLE CART ADD CONSTRAINT fk1_CART_to_USER FOREIGN KEY(fk1_user_id) REFERENCES USER(user_id) ON DELETE RESTRICT ON UPDATE RESTRICT;


--------------------------------------------------------------
-- End of DDL file auto-generation
--------------------------------------------------------------
